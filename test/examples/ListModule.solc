contract ListModule {
  data List[a] = Nil | Cons[a,List[a]]
  data Bool = True | False


  function map (f, xs) {
    match xs {
    | Nil => return Nil ; 
    | Cons[y,ys] => return Cons[f(y), map(f, ys)] ;
    };
  }

  function foldr(f, v, xs) {
    match xs {
    | Nil => return v; 
    | Cons[y,ys] => return f(y, foldr(f,v,ys)) ; 
    };
  }

  function sum (xs) {
    return foldr(lam (x, ac){
                    return primAddWord(x,ac);
                 }, 0, xs) ;
  }

  function filter (p,xs) {
    match xs {
    | Nil => return Nil ; 
    | Cons[y,ys] => 
      match p(y) {
      | True => return Cons[y, filter(p, ys)] ;
      | _ => return filter(p,ys) ;
      } ;
    };
  }
}
