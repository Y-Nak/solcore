class  a : Neg {
   function neg(x:a) -> a;
}

data B = F | T
data Pair[a,b] = Pair[a,b]

instance B : Neg {
  function neg(x:B) { return bnot(x); }
}

instance [a:Neg,b:Neg] => Pair[a,b]:Neg {
  function neg(p) {
    return Pair [neg (fst(p)), neg(snd (p))];
  }
}

contract NegPair {

function bnot(x) {
   match x {
     | T => return F;
     | F => return T;
   };
}

function fromB(b) {
  match b  {
    | F => 0;
    | T => 1;
  };
}

function main() { return  fromB(neg(F)); }
}
